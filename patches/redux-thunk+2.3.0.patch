diff --git a/node_modules/redux-thunk/index.d.ts b/node_modules/redux-thunk/index.d.ts
index 76ed55e..eef4765 100644
--- a/node_modules/redux-thunk/index.d.ts
+++ b/node_modules/redux-thunk/index.d.ts
@@ -1,4 +1,10 @@
-import { Middleware, Action, AnyAction } from "redux";
+import {
+  Action,
+  ActionCreatorsMapObject,
+  AnyAction,
+  Dispatch,
+  Middleware,
+} from 'redux';
 
 export interface ThunkDispatch<S, E, A extends Action> {
   <T extends A>(action: T): T;
@@ -17,4 +23,27 @@ declare const thunk: ThunkMiddleware & {
   withExtraArgument<E>(extraArgument: E): ThunkMiddleware<{}, AnyAction, E>
 }
 
+/**
+ * Takes a ThunkAction and returns a function signature which matches how it would appear when processed using
+ * bindActionCreators
+ *
+ * @template T ThunkAction to be wrapped
+ */
+export type ThunkActionDispatch<T extends (...args: any[]) => ThunkAction<any, any, any, any>> = (...args: Parameters<T>)
+  => ReturnType<ReturnType<T>>;
+
 export default thunk;
+
+/**
+ * Redux behaviour changed by middleware, so overloads here
+ */
+declare module 'redux' {
+  /**
+   * Overload for bindActionCreators redux function, returns expects responses
+   * from thunk actions
+   */
+  function bindActionCreators<M extends ActionCreatorsMapObject<any>>(
+    actionCreators: M,
+    dispatch: Dispatch,
+  ): { [N in keyof M]: ReturnType<M[N]> extends ThunkAction<any, any, any, any> ? (...args: Parameters<M[N]>) => ReturnType<ReturnType<M[N]>> : M[N] }
+}
