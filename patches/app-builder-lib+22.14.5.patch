diff --git a/node_modules/app-builder-lib/out/winPackager.js b/node_modules/app-builder-lib/out/winPackager.js
index 0afd854..a443f9b 100644
--- a/node_modules/app-builder-lib/out/winPackager.js
+++ b/node_modules/app-builder-lib/out/winPackager.js
@@ -328,10 +328,23 @@ class WinPackager extends platformPackager_1.PlatformPackager {
         if (!isAsar) {
             return;
         }
-        const outResourcesDir = path.join(packContext.appOutDir, "resources", "app.asar.unpacked");
-        // noinspection JSUnusedLocalSymbols
-        const fileToSign = await fs_1.walk(outResourcesDir, (file, stat) => stat.isDirectory() || file.endsWith(".exe") || (this.isSignDlls() && file.endsWith(".dll")));
-        await bluebird_lst_1.default.map(fileToSign, file => this.sign(file), { concurrency: 4 });
+
+        const directoriesToBeSigned = [
+            ["resources", "app.asar.unpacked"],
+            ["swiftshader"],
+        ]
+
+        const outDirectories = directoriesToBeSigned.map((directoryPath) => {
+            return path.join.apply(this, [packContext.appOutDir, ...directoryPath]);
+        });
+
+        const filesToSignPromise = outDirectories.map(async (outDir) => {
+            return await fs_1.walk(outDir, (file, stat) => stat.isDirectory() || file.endsWith(".exe") || (this.isSignDlls() && file.endsWith(".dll")));
+        });
+
+        const filesToSign = await Promise.all(filesToSignPromise);
+        const filesToSignFlat = filesToSign.flat(1);
+        await bluebird_lst_1.default.map(filesToSignFlat, file => this.sign(file), { concurrency: 4 });
     }
 }
 exports.WinPackager = WinPackager;
