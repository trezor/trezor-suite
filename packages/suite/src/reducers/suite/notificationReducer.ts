import React from 'react';
import produce, { Draft } from 'immer';

// import { LOCATION_CHANGE } from '@suite-actions/routerActions';
import { NOTIFICATION } from '@suite-actions/constants';
import { DEVICE } from 'trezor-connect';
import {
    NotificationAddPayload,
    NotificationClosePayload,
} from '@suite-actions/notificationActions';

import { Action as SuiteAction } from '@suite-types';

// type NotificationTag = ObjectValues<typeof NOTIFICATION.TAG>;

export interface CallbackAction {
    label: React.ReactNode;
    callback: () => any;
}
export interface NotificationEntry {
    key: string; // autogenerated, used to close notification on click
    id?: string; // programmer provided, might be used to find and close notification programatically
    devicePath?: string; // used to close notifications for device
    variant: 'success' | 'info' | 'error';
    title: React.ReactNode | string;
    message?: React.ReactNode;
    cancelable?: boolean;
    actions?: CallbackAction[];
    // tags?: NotificationTag[];
}

export type State = NotificationEntry[];

const initialState: State = [];

const addNotification = (draft: Draft<State>, payload: NotificationAddPayload) => {
    draft.push({
        key: new Date().getTime().toString(),
        ...payload,
    });
};

const closeNotification = (state: State, payload?: NotificationClosePayload): State => {
    // cancel by id (programmatic usecase)
    if (payload && typeof payload.id === 'string') {
        return state.filter(entry => entry.id !== payload.id);
    }
    // cancel by key (handles user click);
    if (payload && typeof payload.key === 'string') {
        return state.filter(entry => entry.key !== payload.key);
    }
    if (payload && typeof payload.devicePath === 'string') {
        return state.filter(entry => entry.devicePath !== payload.devicePath);
    }
    // should never get here because of typescript
    return state;
};

export default function notification(state: State = initialState, action: SuiteAction): State {
    return produce(state, draft => {
        switch (action.type) {
            case DEVICE.DISCONNECT: {
                const { path } = action.payload;
                return (draft = state.filter(entry => entry.devicePath !== path));
            }
            case NOTIFICATION.ADD:
                return addNotification(draft, action.payload);
            case NOTIFICATION.CLOSE:
                return (draft = closeNotification(state, action.payload));
            // TODO
            // case LOCATION_CHANGE:
            // no default
        }
    });
}
