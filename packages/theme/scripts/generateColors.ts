/* eslint-disable @typescript-eslint/no-var-requires */

import fs from 'fs';
import path from 'path';
import prettier from 'prettier';

const designColors = require('../designColors.json');

const COLORS_FILE_PATH = './src/colors.ts';

const formatColorName = (rawName: string) => rawName.replace(/\s/g, '').replace('(-1)', 'Negative');

const concatenateKey = (key: string, prefix: string) => {
    if (!prefix) {
        return key;
    }
    const capitalizedWords = key
        .split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1));

    const formattedKey = capitalizedWords.join('');
    return `${prefix}${formattedKey}`;
};

const flattenColorSchemeJSONObject = (
    obj: object = {},
    result: Record<string, unknown> = {},
    prefix = '',
) => {
    Object.entries(obj).forEach(entry => {
        const [key, value] = entry;
        if (typeof value !== 'object') {
            if (key === 'value') {
                const colorName = formatColorName(prefix);
                result[colorName] = value;
            }
        } else {
            flattenColorSchemeJSONObject(value!, result, concatenateKey(key, prefix));
        }
    });
    return result;
};

const generateColorsFile = () => {
    const formattedColorThemes: Record<string, object> = {};

    Object.entries<object>(designColors).forEach(([themeName, colors]) => {
        formattedColorThemes[themeName === 'light' ? 'standard' : themeName] =
            flattenColorSchemeJSONObject(colors);
    });

    return `
    // !!! IMPORTANT: This file is autogenerated !!!
    // If you want to add of modify colors, please read README.md to find out more.


    import { CSSColor } from './types';

    export const colorVariants = ${JSON.stringify(formattedColorThemes)} as const;
    export type Color = keyof typeof colorVariants.standard;
    export type Colors = Record<Color, CSSColor>;
    export type ThemeColorVariant = keyof typeof colorVariants;
    `;
};

const formatWithPrettier = async (unformatedFileContent: string) => {
    const prettierConfigPath = (await prettier.resolveConfigFile())!;
    const prettierConfig = {
        ...(await prettier.resolveConfig(prettierConfigPath)),
        parser: 'babel-ts',
    };

    return prettier.format(unformatedFileContent, prettierConfig);
};

(async () => {
    const colorsFileContent = generateColorsFile();

    const formattedColorsFileContent = await formatWithPrettier(colorsFileContent);
    fs.writeFileSync(path.resolve(COLORS_FILE_PATH), formattedColorsFileContent);
})();
