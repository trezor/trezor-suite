skip_docs

# iOS Specific Constants
IOS_PROJECT = File.join(IOS_PATH, "TrezorSuite.xcodeproj").freeze
IOS_PROJECT_WORKSPACE = File.join(IOS_PATH, "TrezorSuite.xcworkspace").freeze

platform :ios do

  before_all do |lane|
    xcversion(version: "14.1")
    puts "Running lane #{lane}..."

    if lane == :debug
      provisioning_name = 'Automatic'
    elsif
    if lane == :develop
      provisioning_name = 'AppStore io.trezor.suite.develop'
      import_certificate_to_keychain
      load_appstore_connect_api_key
      fetch_and_bump_versions
    elsif lane == :staging
      provisioning_name = 'AppStore io.trezor.suite.staging'
      import_certificate_to_keychain
      load_appstore_connect_api_key
      fetch_and_bump_versions
    elsif lane == :production
      provisioning_name = 'AppStore io.trezor.suite'
      import_certificate_to_keychain
      load_appstore_connect_api_key
      fetch_and_bump_versions
    end

    ENV["ENVFILE"] = ".env.#{lane}"
    replace_debug_info_environment_variables(platform: 'ios')
  end

    # temporary keychain database
    def delete_temp_keychain(name)
      delete_keychain(
        name: name
      ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
    end
    def create_temp_keychain(name, password)
      create_keychain(
        name: name,
        password: password,
        unlock: true,
        add_to_search_list: true,
        timeout: 0
        )
    end
    def ensure_temp_keychain(name, password)
      delete_temp_keychain(name)
      create_temp_keychain(name, password)
    end

  desc "Import certificate to keychain"
  private_lane :import_certificate_to_keychain do |options|
    # creates temporary keychain
    keychain_name = ENV['TMP_KEYCHAIN_NAME']
    keychain_password = ENV['TMP_KEYCHAIN_PASSWORD']
    ensure_temp_keychain(keychain_name, keychain_password)

    # import certificate to temporary keychain
    import_certificate(
      keychain_name: ENV['TMP_KEYCHAIN_NAME'],
      keychain_password: ENV['TMP_KEYCHAIN_PASSWORD'],
      certificate_path: "TrezorDistributionCertificate.p12",
      certificate_password: ENV["APPSTORE_CERTIFICATE_PASSWORD"] || "default"
    )
  end

  desc "Load Appstore Connect API Key information to use in subsequent lanes"
  private_lane :load_appstore_connect_api_key do |options|
    app_store_connect_api_key(
      key_id: ENV['APPSTORE_KEY_ID'], # the Key ID used for Appstore Connect authentication
      issuer_id: ENV['APPSTORE_KEY_ISSUER_ID'], # the issuer ID used for Appstore Connect authentication
      key_content: ENV['APPSTORE_KEY_FILE_CONTENT'], # the base64-encoded private key (.p8) used for Appstore Connect authentication
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )
  end

  desc "Check certs and profiles"
  private_lane :prepare_signing do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    cert(
      api_key: api_key,
      keychain_path: "~/Library/Keychains/#{ENV['TMP_KEYCHAIN_NAME']}-db",
      keychain_password: ENV["TMP_KEYCHAIN_PASSWORD"]
    )

    sigh(
      api_key: api_key,
      app_identifier: app_identifier,
      provisioning_name: provisioning_name,
      force: true # always recreate this exact profile to ensure it's valid and not expired
    )
  end

  desc "Increments internal build number and version number"
  private_lane :fetch_and_bump_versions do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    previous_build_number = latest_testflight_build_number(
      app_identifier: app_identifier,
      api_key: api_key
    )

    build_number_int = previous_build_number + 1
    ENV["BUILD_NUMBER"] = "#{build_number_int}"

    increment_build_number(
      xcodeproj: IOS_PROJECT,
      build_number: build_number_int
    )
    increment_version_number(
      xcodeproj: IOS_PROJECT,
      version_number: ENV["VERSION"]
    )
  end

  desc "Build the iOS app for testing"
  private_lane :build_testing do |options|
    build_scheme = options[:scheme]
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    code_sign_identity = CredentialsManager::AppfileConfig.try_fetch_value(:code_sign_identity)

   # update the code signing identities to match profile name and app bundle identifier
   update_code_signing_settings(
     use_automatic_signing: false, # turn off automatic signing during build so correct code signing identity is guaranteed to be used
     targets: ["TrezorSuite"],
     code_sign_identity: code_sign_identity,
     bundle_identifier: app_identifier,
     profile_name: provisioning_name,
     build_configurations: [build_scheme], # only toggle code signing settings for Release configurations
     path: IOS_PROJECT
   )
    unlock_keychain(
      path: "#{ENV['TMP_KEYCHAIN_NAME']}-db",
      password: ENV["TMP_KEYCHAIN_PASSWORD"]
    )
    build_app(
      scheme: build_scheme,
      output_name: "#{build_scheme}-TrezorSuite",
      workspace: IOS_PROJECT_WORKSPACE,
      configuration: build_scheme
    )
  end

  desc "Upload to TestFlight"
  private_lane :upload_testing do |options|
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    upload_to_testflight(
        api_key: api_key,
        skip_waiting_for_build_processing: true
    )
  end

  desc "Push a new beta build to TestFlight"
  private_lane :testing do |options|
    prepare_signing
    build_testing(scheme: options[:scheme])
    upload_testing
  end

  desc "Build and sign the app locally"
  private_lane :local do |options|
    # TODO signing
    puts "Before signing....."

    build_scheme = options[:scheme]
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    code_sign_identity = CredentialsManager::AppfileConfig.try_fetch_value(:code_sign_identity)

    update_code_signing_settings(
      use_automatic_signing: true,
      targets: ["TrezorSuite"],
      code_sign_identity: code_sign_identity,
      bundle_identifier: app_identifier,
      profile_name: provisioning_name,
      build_configurations: [build_scheme], # only toggle code signing settings for Release configurations
      path: IOS_PROJECT
    )

    puts "after update code signing settings....."

  end

  lane :develop do
    testing(scheme: "Develop")
  end
  lane :staging do
    testing(scheme: "Staging")
  end
  lane :production do
    # TODO
    # sth(scheme: "Release", provisioning_name: "AppStore io.trezor.suite"))
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
