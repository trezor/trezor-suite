skip_docs

# iOS Specific Constants
IOS_PROJECT = File.join(IOS_PATH, "TrezorSuite.xcodeproj").freeze
IOS_PROJECT_WORKSPACE = File.join(IOS_PATH, "TrezorSuite.xcworkspace").freeze

# temporary keychain database
def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: true,
    add_to_search_list: true,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do

  before_all do |lane|
    xcversion(version: "14.1")
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    puts "Running lane #{lane} with App ID #{app_identifier}."

    if lane != :debug
      PROVISIONING_NAME = "AppStore #{app_identifier}"
      import_certificate_to_keychain
      load_appstore_connect_api_key
      fetch_and_bump_versions
    else
      PROVISIONING_NAME = "#{app_identifier} Development"
    end

    ENV["ENVFILE"] = ".env.#{lane}"
    replace_debug_info_environment_variables
  end

  desc "Import certificate to keychain"
  private_lane :import_certificate_to_keychain do
    # creates temporary keychain
    keychain_name = ENV['TMP_KEYCHAIN_NAME']
    keychain_password = ENV['TMP_KEYCHAIN_PASSWORD']
    ensure_temp_keychain(keychain_name, keychain_password)

    # import certificate to temporary keychain
    import_certificate(
      keychain_name: ENV['TMP_KEYCHAIN_NAME'],
      keychain_password: ENV['TMP_KEYCHAIN_PASSWORD'],
      certificate_path: "TrezorDistributionCertificate.p12",
      certificate_password: ENV["APPSTORE_CERTIFICATE_PASSWORD"] || "default"
    )
  end

  desc "Load Appstore Connect API Key information to use in subsequent lanes"
  private_lane :load_appstore_connect_api_key do
    app_store_connect_api_key(
      key_id: ENV['APPSTORE_KEY_ID'], # the Key ID used for Appstore Connect authentication
      issuer_id: ENV['APPSTORE_KEY_ISSUER_ID'], # the issuer ID used for Appstore Connect authentication
      key_content: ENV['APPSTORE_KEY_FILE_CONTENT'], # the base64-encoded private key (.p8) used for Appstore Connect authentication
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )
  end

  desc "Check certs and profiles"
  private_lane :prepare_distribution_signing do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    # it makes sure you have a valid certificate and its private key installed on the local machine
    cert(
      api_key: api_key,
      keychain_path: "~/Library/Keychains/#{ENV['TMP_KEYCHAIN_NAME']}-db",
      keychain_password: ENV["TMP_KEYCHAIN_PASSWORD"]
    )

    # it makes sure you have a valid provisioning profile installed locally, that matches the installed certificate
    sigh(
      api_key: api_key,
      app_identifier: app_identifier,
      provisioning_name: PROVISIONING_NAME,
      force: true # always recreate this exact profile to ensure it's valid and not expired
    )
  end

  desc "Increments internal build number and version number"
  private_lane :fetch_and_bump_versions do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    previous_build_number = latest_testflight_build_number(
      app_identifier: app_identifier,
      api_key: api_key
    )

    build_number_int = previous_build_number + 1
    ENV["BUILD_NUMBER"] = "#{build_number_int}"

    increment_build_number(
      xcodeproj: IOS_PROJECT,
      build_number: build_number_int
    )
    increment_version_number(
      xcodeproj: IOS_PROJECT,
      version_number: ENV["VERSION"]
    )
  end

  desc "Build the iOS app for testing"
  private_lane :build_app_to_distribute do |options|
    build_scheme = options[:scheme]
    export_method = options[:export_method]
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    code_sign_identity = "iPhone Distribution" # sign an app before distributing it through the App Store

   # update the code signing identities to match profile name and app bundle identifier
   update_code_signing_settings(
     use_automatic_signing: false, # turn off automatic signing during build so correct code signing identity is guaranteed to be used
     targets: ["TrezorSuite"],
     code_sign_identity: code_sign_identity,
     bundle_identifier: app_identifier,
     profile_name: PROVISIONING_NAME,
     build_configurations: [build_scheme], # only toggle code signing settings for Release configurations
     path: IOS_PROJECT
   )
    unlock_keychain(
      path: "#{ENV['TMP_KEYCHAIN_NAME']}-db",
      password: ENV["TMP_KEYCHAIN_PASSWORD"]
    )
    build_app(
      scheme: build_scheme,
      export_method: export_method,
      output_name: "#{build_scheme}-TrezorSuite",
      workspace: IOS_PROJECT_WORKSPACE,
      configuration: build_scheme
    )
  end

  desc "Sign, build and push a new build to TestFlight"
  private_lane :build_to_testflight do |options|
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    prepare_distribution_signing
    build_app_to_distribute(scheme: options[:scheme], export_method: options[:export_method])

    upload_to_testflight(
        api_key: api_key,
        skip_waiting_for_build_processing: true
    )
  end

  desc "Sign, build and push a new build to App Store"
  private_lane :build_to_app_store do |options|
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    prepare_distribution_signing
    build_app_to_distribute(scheme: options[:scheme], export_method: options[:export_method])

    upload_to_app_store(
        api_key: api_key,
        run_precheck_before_submit: false,
        force: true, # not to generate HTML report
        reject_if_possible: true, # if the app is already waiting for the review and not reviewing yet, cancel it
        skip_metadata: false,
        skip_screenshots: true,
        languages: ['en-US'],
        release_notes: {
            "default" => "TODO idea - this could be specified from Github action input?",
            "en-US" => "TODO idea - this could be specified from Github action input?",
        }
    )
  end

  desc "Sign and build the app locally and get .ipa"
  private_lane :build_local_ipa do |options|
    build_scheme = options[:scheme]
    export_method = options[:export_method]
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    # 0. get username (to get or generate provisioning profile with a certificate for requesting user)
    # 1 provisioning profile has to be connected with 1 local certificate so every developer will have own provisioning profile
    apple_username = prompt(text: "Please, write your Apple ID Username and confirm: ")

    # 1. development signing
    cert(
      development: true,
      username: apple_username
    )
    sigh(
      development: true,
      username: apple_username,
      app_identifier: app_identifier,
      provisioning_name: "#{PROVISIONING_NAME} - #{apple_username}",
      force: true # always recreate this exact profile to ensure it's valid and not expired
    )

    # 2. development build
    code_sign_identity = "Apple Development" # use app services during development and testing

    # Configures Xcode's Codesigning options
    update_code_signing_settings(
      use_automatic_signing: true,
      targets: ["TrezorSuite"],
      code_sign_identity: code_sign_identity,
      bundle_identifier: app_identifier,
      build_configurations: [build_scheme], # only toggle code signing settings for Release configurations
      path: IOS_PROJECT
    )

    build_app(
      scheme: build_scheme,
      export_method: export_method,
      output_name: "#{build_scheme}-TrezorSuite",
      workspace: IOS_PROJECT_WORKSPACE,
      configuration: build_scheme
    )
  end

  lane :debug do
    build_local_ipa(scheme: "Debug", export_method: "development")
  end
  lane :develop do
    build_to_testflight(scheme: "Develop", export_method: "app-store")
  end
  lane :staging do
    build_to_testflight(scheme: "Staging", export_method: "app-store")
  end
  lane :production do
    build_to_app_store(scheme: "Release", export_method: "app-store")
  end
end
