.run_everything_rules: &run_everything_rules
  refs:
    - develop
    - releases
    - schedules
    - /^release\//

.connect_included_methods: &connect_included_methods
  TESTS_INCLUDED_METHODS:
    [
      "applySettings,applyFlags,getFeatures,getFirmwareHash,checkFirmwareAuthenticity",
      "signTransaction",
      "getAccountInfo,getAccountDescriptor,getAddress,getPublicKey,signMessage,verifyMessage,composeTransaction,getOwnershipId,getOwnershipProof",
      "stellarGetAddress,stellarSignTransaction",
      "cardanoGetAddress,cardanoGetNativeScriptHash,cardanoGetPublicKey,cardanoSignTransaction",
      "eosGetPublicKey,eosSignTransaction",
      "ethereumGetAddress,ethereumGetPublicKey,ethereumSignMessage,ethereumSignTransaction,ethereumVerifyMessage,ethereumSignTypedData",
      "nemGetAddress,nemSignTransaction",
      "rippleGetAddress,rippleSignTransaction",
      "tezosGetAddress,tezosGetPublicKey,tezosSignTransaction",
      "binanceGetAddress,binanceGetPublicKey,binanceSignTransaction",
    ]

.connect_test_pattern_1: &connect_test_pattern_1
  TESTS_PATTERN: "init authorizeCoinjoin cancelCoinjoinAuthorization passphrase unlockPath setBusy override"

.connect_test_pattern_2: &connect_test_pattern_2
  TESTS_PATTERN: "methods"

# @trezor/suite-web
.e2e web:
  stage: integration testing
  retry: 1
  dependencies:
    - install
  variables:
    COMPOSE_PROJECT_NAME: $CI_JOB_ID
    COMPOSE_FILE: ./docker/docker-compose.suite-ci.yml
    ## Tells Cypress where is the index of application
    CYPRESS_ASSET_PREFIX: /web
    CYPRESS_baseUrl: ${DEV_SERVER_URL}/suite-web/
    ## should tests do snapshot testing
    # cypress open todo. temporarily turned off (messaging system)
    CYPRESS_SNAPSHOT: 0
    ## reporter url
    TRACK_SUITE_URL: https://track-suite-ff9ad9f5b4f6.herokuapp.com
    ## when debugging or developing tests it does not make sense to have retries,
    ## in other cases retries are useful to avoid occasional failures due to flaky tests
    ALLOW_RETRY: 1
    CYPRESS_TEST_URLS: ${CI_COMMIT_REF_NAME}
  before_script:
    - docker login $CI_DEPENDENCY_PROXY_SERVER -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD
  script:
    - yarn install --immutable
    - docker-compose pull
    - docker-compose up -d ${CONTAINERS}
    - docker-compose run test-run
  after_script:
    - docker cp ${CI_JOB_ID}_trezor-user-env-unix_1:/trezor-user-env/logs/debugging.log trezor-user-env-debugging.log
    - docker cp ${CI_JOB_ID}_trezor-user-env-unix_1:/trezor-user-env/logs/emulator_bridge.log tenv-emulator-bridge-debugging.log
    - docker cp ${CI_JOB_ID}_trezor-user-env-unix_1:/trezor-user-env/docker/version.txt trezor-user-env-version.txt
    - docker-compose down
    - docker network prune -f
  artifacts:
    expire_in: 7 days
    when: always
    paths:
      - ./packages/suite-web/e2e/snapshots
      - ./packages/suite-web/e2e/screenshots
      - ./packages/suite-web/e2e/videos
      - download-snapshots.sh
      - trezor-user-env-debugging.log
      - tenv-emulator-bridge-debugging.log
      - trezor-user-env-version.txt
  interruptible: true

.suite web base:
  extends: .e2e web
  parallel:
    matrix:
      - TEST_GROUP:
          [
            "@group:suite",
            "@group:onboarding",
            "@group:device-management",
            "@group:settings",
            "@group:metadata",
            "@group:passphrase",
            "@group:browser",
            "@group:coinmarket",
          ]
        CONTAINERS: "trezor-user-env-unix"
        CYPRESS_USE_TREZOR_USER_ENV_BRIDGE: 1
      - TEST_GROUP: "@group:wallet"
        CONTAINERS: "trezor-user-env-unix bitcoin-regtest"
        CYPRESS_USE_TREZOR_USER_ENV_BRIDGE: 1
      - TEST_GROUP: "@group:firmware-update"
        CONTAINERS: "trezor-user-env-unix" # todo: this group should not need trezor-user-env

suite web migrations:
  extends: .e2e web
  stage: legacy testing
  variables:
    # Each test file will be run for all urls in TEST_URLS array. Useful for migration tests
    CYPRESS_TEST_URLS: release/22.5 ${CI_COMMIT_REF_NAME}
    CYPRESS_USE_TREZOR_USER_ENV_BRIDGE: 1
  parallel:
    matrix:
      - TEST_GROUP: "@group:migrations"
        CONTAINERS: "trezor-user-env-unix"

suite web:
  extends: .suite web base

suite web snapshots:
  extends: .suite web base
  when: manual
  variables:
    CYPRESS_SNAPSHOT: 1
    CYPRESS_updateSnapshots: 1

# Tests against latest trezor-firmware main
suite web canary fws:
  extends: .suite web base
  stage: canary testing
  only:
    refs:
      - schedules
  variables:
    FIRMWARE: 2-main

suite web canary fws manual:
  extends: .suite web base
  stage: canary testing
  except:
    refs:
      - schedules
  when: manual
  variables:
    FIRMWARE: 2-main

# TODO scheduled jobs against beta chrome channel
# TODO scheduled jobs against suite.trezor.io

# @trezor/suite-desktop
.e2e desktop:
  stage: integration testing
  retry: 1
  dependencies:
    - install
  variables:
    COMPOSE_PROJECT_NAME: $CI_JOB_ID # for unique containers
    COMPOSE_FILE: ./docker/docker-compose.suite-desktop-ci.yml
    TEST_FILE: $TEST_FILE
  before_script:
    - docker login $CI_DEPENDENCY_PROXY_SERVER -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD
  script:
    - yarn install --immutable
    # 3 next steps could be removed if we passed packages/suite-desktop/dist and build folder as an artifact
    # but since this is run only in nightly builds it can be probably built inside the job for now..
    - yarn message-system-sign-config
    - yarn workspace @trezor/suite-desktop build:linux
    - docker-compose pull
    - docker-compose up -d ${CONTAINERS}
    - docker-compose run test-run
  after_script:
    - docker-compose down
    - docker network prune -f
  artifacts:
    expire_in: 7 days
    when: always
    paths:
      - "**/test-results/**"
  interruptible: true
  parallel:
    matrix:
      - TEST_FILE: ["spawn-tor", "spawn-bridge", "suite-guide"]
        CONTAINERS: "trezor-user-env-unix"
      - TEST_FILE: ["electrum"]
        CONTAINERS: "trezor-user-env-unix electrum-regtest"
      # commented out. coinjoin test is not adapted to current state of this feature
      # - TEST_FILE: ["coinjoin"]
      #   CONTAINERS: "trezor-user-env-unix coinjoin-backend"

suite desktop:
  extends: .e2e desktop
  only:
    <<: *run_everything_rules

suite desktop manual:
  extends: .e2e desktop
  except:
    <<: *run_everything_rules
  when: manual

# @trezor/transport
.e2e transport:
  stage: integration testing
  variables:
    COMPOSE_FILE: ./docker/docker-compose.transport-test.yml
  script:
    - yarn install --immutable
    - yarn workspace @trezor/utils build:lib
    - yarn workspace @trezor/transport build:lib
    # run e2e tests
    - ./docker/docker-transport-test.sh
  after_script:
    - docker-compose down
    - docker network prune -f
  interruptible: true

transport:
  extends: .e2e transport
  only:
    <<: *run_everything_rules

transport manual:
  extends: .e2e transport
  except:
    <<: *run_everything_rules
  when: manual

# @trezor/connect-popup (via @trezor/connect-explorer)
.e2e connect-popup:
  stage: integration testing
  retry: 1
  variables:
    COMPOSE_PROJECT_NAME: $CI_JOB_ID
    COMPOSE_FILE: ./docker/docker-compose.connect-popup-ci.yml
    URL: ${DEV_SERVER_URL}/connect/${CI_COMMIT_REF_NAME}/
    TEST_FILE: $TEST_FILE
  script:
    - yarn install --immutable
    - docker-compose pull
    - docker-compose up -d trezor-user-env-unix
    - docker-compose run test-run
  after_script:
    - docker-compose down
    - docker network prune -f
  artifacts:
    expire_in: 7 days
    when: always
    paths:
      - ./packages/connect-popup/e2e/screenshots
      - ./packages/connect-popup/connect-popup-overview.html
      - ./packages/connect-popup/test-results
  interruptible: true
  parallel:
    matrix:
      - TEST_FILE: ["methods.test"]
      - TEST_FILE: ["popup-close.test"]
      - TEST_FILE: ["popup-error-page.test"]
      - TEST_FILE: ["passphrase.test"]
      - TEST_FILE: ["log-page.test"]
      - TEST_FILE: ["unchained.test"]
      - TEST_FILE: ["browser-support.test"]
      - TEST_FILE: ["transport.test"]
      - TEST_FILE: ["permissions.test"]

connect-popup:
  extends: .e2e connect-popup
  dependencies:
    - install
    - connect-web build
  only:
    <<: *run_everything_rules

connect-popup manual:
  extends: .e2e connect-popup
  needs:
    - install
    - connect-web build
  except:
    <<: *run_everything_rules
  when: manual

.connect-popup legacy npm package base:
  extends: .e2e connect-popup
  stage: legacy testing
  needs:
    - install
    - connect-web build
  retry: 0
  variables:
    COMPOSE_PROJECT_NAME: $CI_JOB_ID
    COMPOSE_FILE: ./docker/docker-compose.connect-popup-ci.yml
    # It will use connect version from npm legacy version with current popup.
    URL: ${DEV_SERVER_URL}/connect/npm-release/connect-${CONNECT_VERSION}/?trezor-connect-src=${DEV_SERVER_URL}/connect/${CI_COMMIT_REF_NAME}/
    TEST_FILE: $TEST_FILE
  parallel:
    matrix:
      - CONNECT_VERSION: "9.0.10"
        TEST_FILE: [
            "browser-support.test",
            "popup-close-legacy.test",
            # Test methods commented until we make it work with legacy connect due to trustHost in old connect-explorer
            # "methods.test",
          ]

connect-popup legacy npm package manual:
  extends: .connect-popup legacy npm package base
  except:
    <<: *run_everything_rules
  when: manual

connect-popup legacy npm package:
  extends: .connect-popup legacy npm package base
  only:
    refs:
      - schedules

.e2e connect-popup-webextension:
  stage: integration testing
  retry: 1
  variables:
    COMPOSE_PROJECT_NAME: $CI_JOB_ID
    COMPOSE_FILE: ./docker/docker-compose.connect-popup-ci.yml
    URL: ${DEV_SERVER_URL}/connect/${CI_COMMIT_REF_NAME}/
    TEST_FILE: $TEST_FILE
    IS_WEBEXTENSION: "true"
  script:
    - yarn install --immutable
    - yarn workspace @trezor/connect-explorer-webextension build
    - docker-compose pull
    - docker-compose up -d trezor-user-env-unix
    - docker-compose run test-run
  after_script:
    - docker-compose down
    - docker network prune -f
  artifacts:
    expire_in: 7 days
    when: always
    paths:
      - ./packages/connect-popup/e2e/screenshots
      - ./packages/connect-popup/connect-popup-overview.html
      - ./packages/connect-popup/test-results
  interruptible: true
  parallel:
    matrix:
      - TEST_FILE: ["methods.test"]
      - TEST_FILE: ["passphrase.test"]
      - TEST_FILE: ["popup-close.test"]
      - TEST_FILE: ["popup-error-page.test"]

connect-popup-webextension:
  extends: .e2e connect-popup-webextension
  dependencies:
    - install
    - connect-web build
  only:
    <<: *run_everything_rules

connect-popup-webextension manual:
  extends: .e2e connect-popup-webextension
  needs:
    - install
    - connect-web build
  except:
    <<: *run_everything_rules
  when: manual

.connect:
  stage: integration testing
  retry: 1
  dependencies:
    - install
  variables:
    COMPOSE_PROJECT_NAME: $CI_JOB_ID
    COMPOSE_FILE: ./docker/docker-compose.connect-test.yml
    TESTS_INCLUDED_METHODS: $TESTS_INCLUDED_METHODS
    TESTS_EXCLUDED_METHODS: $TESTS_EXCLUDED_METHODS
    TESTS_PATTERN: $TESTS_PATTERN
    TESTS_SCRIPT: yarn workspace @trezor/connect test:e2e:${TESTS_ENVIRONMENT}
    TESTS_FIRMWARE: $TESTS_FIRMWARE
    TESTS_USE_TX_CACHE: $TESTS_MOCK_BACKENDS
    TESTS_USE_WS_CACHE: $TESTS_MOCK_BACKENDS
  before_script:
    - docker-compose down
    - docker network prune -f
  script:
    - git submodule update --init --recursive
    - yarn install --immutable
    # should not be needed, rather hand over artifacts?
    - if [ "$TESTS_ENVIRONMENT" == "web" ]; then yarn workspace @trezor/connect-iframe build; else echo "else"; fi
    # should not be needed, rather hand over artifacts?
    - if [ "$TESTS_ENVIRONMENT" == "web" ]; then yarn workspace @trezor/connect-web build; else echo "else"; fi

    # switch node version for testing.
    # todo: nvm is present in base image but not available here
    # - sed -i "/\"node\"/d" package.json
    # - nvm install ${TESTS_NODE_VERSION}
    - docker-compose pull
    - docker-compose up -d trezor-user-env-unix
    - docker-compose run test-run
  after_script:
    - docker cp ${CI_JOB_ID}_trezor-user-env-unix_1:/trezor-user-env/logs/debugging.log trezor-user-env-debugging.log
    - docker cp ${CI_JOB_ID}_trezor-user-env-unix_1:/trezor-user-env/logs/emulator_bridge.log tenv-emulator-bridge-debugging.log
    - docker cp ${CI_JOB_ID}_trezor-user-env-unix_1:/trezor-user-env/docker/version.txt trezor-user-env-version.txt
    - docker-compose down
    - docker network prune -f
  interruptible: true
  artifacts:
    expire_in: 7 days
    when: always
    paths:
      - trezor-user-env-debugging.log
      - tenv-emulator-bridge-debugging.log
      - trezor-user-env-version.txt

.connect matrix:
  extends: .connect
  parallel:
    matrix:
      - TESTS_ENVIRONMENT: ["node", "web"]
        <<: *connect_test_pattern_1
      - TESTS_ENVIRONMENT: ["node", "web"]
        <<: *connect_test_pattern_2
        <<: *connect_included_methods
        TESTS_MOCK_BACKENDS: "false"

.connect legacy fws base:
  extends: .connect matrix
  stage: legacy testing
  variables:
    TESTS_FIRMWARE: "2.2.0"

connect legacy fws:
  extends: .connect legacy fws base
  only:
    refs:
      - schedules

connect legacy fws manual:
  extends: .connect legacy fws base
  except:
    refs:
      - schedules
  when: manual

.connect canary fws base:
  extends: .connect matrix
  stage: canary testing
  variables:
    TESTS_FIRMWARE: "2-main"

connect canary fws:
  extends: .connect canary fws base
  only:
    refs:
      - schedules

connect canary fws manual:
  extends: .connect canary fws base
  except:
    refs:
      - schedules
  when: manual

connect T2B1:
  extends: .connect
  only:
    refs:
      - schedules
  parallel:
    matrix:
      - TESTS_ENVIRONMENT: ["node", "web"]
        TESTS_PATTERN: "authenticateDevice"
        TESTS_FIRMWARE: ["2-latest"]
        TESTS_FIRMWARE_MODEL: "R"
      - TESTS_ENVIRONMENT: ["node"]
        TESTS_PATTERN: "methods"
        TESTS_FIRMWARE: ["2-latest"]
        TESTS_FIRMWARE_MODEL: "R"
        TESTS_INCLUDED_METHODS: [
            "applySettings,applyFlags,getFirmwareHash", # getFeatures (capabilies)
            # "signTransaction", (unsupported chain in fixtures)
            "getAccountInfo,getAccountDescriptor,getPublicKey,signMessage,verifyMessage,composeTransaction,getOwnershipId,getOwnershipProof", # getAddress (unsuppported chain in fixtures)
            "stellarGetAddress,stellarSignTransaction",
            "cardanoGetAddress,cardanoGetNativeScriptHash,cardanoGetPublicKey,cardanoSignTransaction",
            # eos not supported
            "ethereumGetAddress,ethereumGetPublicKey,ethereumSignMessage,ethereumSignTransaction,ethereumVerifyMessage,ethereumSignTypedData",
            # nem not supported
            "rippleGetAddress,rippleSignTransaction",
            "tezosGetAddress,tezosGetPublicKey,tezosSignTransaction",
            "binanceGetAddress,binanceGetPublicKey,binanceSignTransaction",
          ]
        TESTS_MOCK_BACKENDS: "false"

.e2e connect-web:
  stage: integration testing
  variables:
    URL: ${DEV_SERVER_URL}/connect/${CI_COMMIT_REF_NAME}/
  script:
    - yarn install --immutable
    - yarn workspace @trezor/connect-web test:e2e
  interruptible: true

connect-web:
  extends: .e2e connect-web
  only:
    <<: *run_everything_rules

.connect-web mv2:
  stage: integration testing
  variables:
    COMPOSE_PROJECT_NAME: $CI_JOB_ID
    COMPOSE_FILE: ./docker/docker-compose.connect-webextension-test.yml
    URL: ${DEV_SERVER_URL}/connect/${CI_COMMIT_REF_NAME}/
  script:
    - yarn install --immutable
    - node ./packages/connect-examples/update-webextensions.js --trezor-connect-src "${URL}" --npm-src "${URL}/trezor-connect.js"
    - docker-compose pull
    - docker-compose up -d trezor-user-env-unix
    - docker-compose run test-run
  after_script:
    - docker-compose down
    - docker network prune -f

connect-web mv2:
  extends: .connect-web mv2
  only:
    <<: *run_everything_rules
  when: always

connect-web mv2 manual:
  extends: .connect-web mv2
  except:
    <<: *run_everything_rules
  when: manual
