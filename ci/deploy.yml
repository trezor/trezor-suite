# Config
.run_everything_rules: &run_everything_rules
  refs:
    - develop
    - releases
    - schedules
    - /^release\//

# todo: it should be possible to share between files using
# https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html#reference-tags
.run_connect_rules: &run_connect_rules
  refs:
    - schedules
    - develop
  changes:
    - "packages/blockchain-link"
    - "packages/connect*/**"
    - "packages/transport"
    - "packages/utxo-lib"
    - "packages/utils"

# Suite web deploy to dev
suite-web deploy dev:
  stage: deploy to dev
  variables:
    DEPLOY_DIRECTORY: ${DEPLOY_BASE_DIR}/suite-web/${CI_BUILD_REF_NAME}
  needs:
    - suite-web-landing build dev
    - suite-web build dev
  environment:
    name: ${CI_BUILD_REF_NAME}
    url: $BASE_REVIEW_URL/${CI_BUILD_REF_NAME}
  before_script: []
  script:
    - mkdir -p ${DEPLOY_DIRECTORY}/web
    - rsync --delete -va packages/suite-web-landing/build/ "${DEPLOY_DIRECTORY}/"
    - rsync --delete -va packages/suite-web/build/ "${DEPLOY_DIRECTORY}/web/"
  tags:
    - deploy

# Suite web landing deploy to dev
suite-web-landing deploy dev:
  stage: deploy to dev
  variables:
    DEPLOY_DIRECTORY: ${DEPLOY_BASE_DIR}/suite-web-landing/${CI_BUILD_REF_NAME}
  needs:
    - suite-web-landing build dev
  environment:
    name: ${CI_BUILD_REF_NAME}
    url: $BASE_REVIEW_URL/${CI_BUILD_REF_NAME}
  before_script: []
  script:
    - mkdir -p ${DEPLOY_DIRECTORY}
    - rsync --delete -va packages/suite-web-landing/build/ "${DEPLOY_DIRECTORY}/"
  tags:
    - deploy

# Suite desktop deploy to dev and production
suite-desktop deploy dev:
  stage: deploy to dev
  only:
    <<: *run_everything_rules
  variables:
    DEPLOY_DIRECTORY: ${DEPLOY_BASE_DIR}/suite-desktop/${CI_BUILD_REF_NAME}
  script:
    - mkdir -p ${DEPLOY_DIRECTORY}
    - 'rsync --delete -va "${DESKTOP_APP_NAME}"-*.AppImage "${DEPLOY_DIRECTORY}/" || :'
    - 'rsync --delete -va "${DESKTOP_APP_NAME}"-*.dmg "${DEPLOY_DIRECTORY}/" || :'
    - 'rsync --delete -va "${DESKTOP_APP_NAME}"-*.exe "${DEPLOY_DIRECTORY}/" || :'
  tags:
    - deploy

# # Suite native deploy to dev
# suite-native deploy dev:
#   stage: deploy to dev
#   only:
#     <<: *run_everything_rules
#   variables:
#     DEPLOY_DIRECTORY: ${DEPLOY_BASE_DIR}/suite-native/${CI_BUILD_REF_NAME}
#   script:
#     - mkdir -p ${DEPLOY_DIRECTORY}
#     - rsync --delete -va app-release.apk "${DEPLOY_DIRECTORY}/"
#   tags:
#     - deploy
# TODO: Disabled until the new suite native build is introduced. Fix this deploy job after.

# Messaging system deploy to dev
msg-system deploy dev:
  stage: deploy to dev
  needs:
    - "msg-system config sign dev"
  when: manual
  tags:
    - deploy
  variables:
    AWS_CLOUDFRONT_ID: E1ERY5K2OTKKI1
  script:
    - source ${MSG_SYSTEM_DATA_DEPLOY_KEYFILE}
    - aws s3 cp packages/suite-data/files/message-system/config.v1.jws s3://data.trezor.io/config/develop/config.v1.jws
    - aws cloudfront create-invalidation --distribution-id ${AWS_CLOUDFRONT_ID} --paths '/config/develop/*'

.connect-explorer deploy dev base:
  stage: deploy to dev
  variables:
    DEPLOY_DIRECTORY: ${DEPLOY_BASE_DIR}/connect-explorer/${CI_BUILD_REF_NAME}
  environment:
    name: ${CI_BUILD_REF_NAME}
    url: $BASE_REVIEW_URL/${CI_BUILD_REF_NAME}
  before_script: []
  script:
    - mkdir -p ${DEPLOY_DIRECTORY}/connect-explorer
    - rsync --delete -va packages/connect-explorer/build/ "${DEPLOY_DIRECTORY}/"
  tags:
    - deploy

connect-explorer deploy dev:
  extends: .connect-explorer deploy dev base
  needs:
    - connect-explorer build
  only:
    <<: *run_connect_rules

connect-explorer deploy dev manual:
  extends: .connect-explorer deploy dev base
  needs:
    - connect-explorer build
  except:
    <<: *run_everything_rules
  when: manual

# npm packages deploy to npm registry
.npm_deploy_rules: &npm_deploy_rules
  stage: deploy to dev
  when: manual
  tags:
    - deploy
  before_script:
    - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
  after_script:
    - rm ~/.npmrc

beta blockchain-link deploy npm:
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/blockchain-link && npm publish --tag beta"

beta components deploy npm:
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/components && npm publish --tag beta"

beta connect-common deploy npm:
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/connect-common && npm publish --tag beta"

beta transport deploy npm:
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/transport && npm publish --tag beta"

beta utils deploy npm:
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/utils && npm publish --tag beta"

beta utxo-lib deploy npm:
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/utxo-lib && npm publish --tag beta"

blockchain-link deploy npm:
  only:
    <<: *run_everything_rules
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/blockchain-link && npm publish"

components deploy npm:
  only:
    <<: *run_everything_rules
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/components && npm publish"

connect-common deploy npm:
  only:
    <<: *run_everything_rules
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/connect-common && npm publish"

transport deploy npm:
  only:
    <<: *run_everything_rules
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/transport && npm publish"

utils deploy npm:
  only:
    <<: *run_everything_rules
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/utils && npm publish"

utxo-lib deploy npm:
  only:
    <<: *run_everything_rules
  <<: *npm_deploy_rules
  script:
    - nix-shell --run "yarn && yarn build:libs && cd ./packages/utxo-lib && npm publish"

# connect deploy to dev
connect deploy to dev:
  stage: deploy to dev
  # only:
  #   <<: *run_connect_rules
  needs:
    - connect-web build
    - connect-explorer build
  except:
    - v8
  variables:
    GIT_STRATEGY: none
    DEPLOY_DIRECTORY: ${DEPLOY_BASE_DIR}/connect/${CI_BUILD_REF_NAME}
  # when: manual
  dependencies:
    - connect-web build
    - connect-explorer build
  environment:
    name: $CI_BUILD_REF_NAME
    url: $BASE_REVIEW_URL/$CI_BUILD_REF_NAME
  before_script: []
  script:
    - rm -rfv ${DEPLOY_DIRECTORY}
    - mkdir -pv ${DEPLOY_DIRECTORY}
    - rsync -aviuzP packages/connect-iframe/build/ "${DEPLOY_DIRECTORY}/"
    - rsync -aviuzP packages/connect-popup/build/ "${DEPLOY_DIRECTORY}/"
    - rsync -aviuzP packages/connect-web/build/ "${DEPLOY_DIRECTORY}/"
    - rsync -aviuzP packages/connect-explorer/build/ "${DEPLOY_DIRECTORY}/"
    - ls -la ${DEPLOY_DIRECTORY}
    - ls -la ${DEPLOY_DIRECTORY}/data
    - ls -la ${DEPLOY_DIRECTORY}/fonts
    - ls -la ${DEPLOY_DIRECTORY}/images
    - ls -la ${DEPLOY_DIRECTORY}/js
  tags:
    - deploy
    # todo: use connect_deploy?
    # - connect_deploy
